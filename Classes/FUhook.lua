-- function hook class 
local fuHook = {}
fuHook.__index = fuHook

function fuHook.new(_function)
    local self = setmetatable({}, fuHook)

    self.toHook = _function
    self.hooks = {}

    return self 
end

function fuHook:correctType()
    return (type(self.toHook) == "function") 
end

-- if rawhooking gets detected they detect hooks universally.
function fuHook:rawHook()
    local calls = 0
    self.hooks = self.hooks or {}

    if fuHook:correctType() then
        self.hooks.oldFunction = nil
        self.hooks.oldFunction = hookfunction(self.toHook, function(...)
            calls += 1
            return self.hooks.oldFunction(...)
        end)

        if  calls >= 1 then 
            print("raw hook ran " .. tostring(calls) .. " times")
            self.hooks.oldFunction = nil
        end
    end
end

return fuHook
